<?xml version="1.0" encoding="windows-1252"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>YF.Engine Coding Standard Guidelines</title>
<meta content="text/html; charset=windows-1252" http-equiv="Content-Type" />
</head>
<body alink="#cccccc" bgcolor="#ffffff" link="#0000ff" text="#000000" 
vlink="#0000ff">
<font face="verdana,arial,tahoma" size="-1"><a name="top" id="top"></a> 
<h2>YF.Engine Coding Standard Guidelines</h2>
Comments or suggestions? email <a 
href="mailto:yfix.dev@gmail.com">yfix.dev@gmail.com</a><br />
<br />
<a href="#editor">Editor Settings</a><br />
<a href="#naming">Naming Conventions</a><br />
<a href="#layout">Code Layout</a><br />
<a href="#general">General Guidelines</a><br />
<br />
<br />
<a name="editor" id="editor"></a><a href="#top">top</a> 
<h3>Editor Settings</h3>
<p><b>Tabs vs Spaces:</b> In order to make this as simple as possible, we will 
	be using tabs, not spaces. Feel free to set how many spaces your editor uses 
	when it <b>displays</b> tabs, but make sure that when you <b>save</b> the 
	file, it's saving tabs and not spaces. This way, we can each have the code 
	be displayed the way we like it, without breaking the layout of the actual 
	files. </p>
<p><b>Linefeeds:</b> Ensure that your editor is saving files in the WIN32 format. 
	This means lines are terminated with a CR/LF combo not just newline as on 
	UNIX. </p>
<br />
<br />
<a name="naming" id="naming"></a><a 
href="#top">top</a> 
<h3>Naming Conventions</h3>
<p>We will not be using any form of hungarian notation in our naming conventions. 
	Many of us believe that hungarian naming is one of the primary code obfuscation 
	techniques currently in use. </p>
<p><b>Variable Names:</b> Variable names should be in all lowercase, with words 
	separated by an underscore. <br />
	<br />
	&nbsp;&nbsp;&nbsp;&nbsp;Example: <code><font 
size="+1">$current_user</font></code> is right, but <code><font 
size="+1">$currentuser</font></code> and <code><font 
size="+1">$currentUser</font></code> are not. <br />
	<br />
	Names should be descriptive, but concise. We don't want huge sentences as 
	our variable names, but typing an extra couple of characters is always better 
	than wondering what exactly a certain variable is for. </p>
<p><b>Loop Indices:</b> The <i>only</i> situation where a one-character variable 
	name is allowed is when it's the index for some looping construct. In this 
	case, the index of the outer loop should always be $i. If there's a loop inside 
	that loop, its index should be $j, followed by $k, and so on. If the loop 
	is being indexed by some already-existing variable with a meaningful name, 
	this guideline does not apply. <br />
	<br />
	&nbsp;&nbsp;&nbsp;&nbsp;Example: </p>
<pre><font size="+1">
		for ($i = 0; $i &lt; $outer_size; $i++) {
		   for ($j = 0; $j &lt; $inner_size; $j++) {
		      foo($i, $j);
		   }
		} </font></pre>
<p></p>
<p><b>Function Names:</b> Functions should also be named descriptively. We're 
	not programming in C here, we don't want to write functions called things 
	like "stristr()". Again, all lower-case names with words separated by a single 
	underscore character. Function names should preferably have a verb in them 
	somewhere. Good function names are <code><font 
size="+1">print_login_status()</font></code>, <code><font 
size="+1">get_user_data()</font></code>, etc.. </p>
<p><b>Function Arguments:</b> Arguments are subject to the same guidelines as 
	variable names. We don't want a bunch of functions like: <code><font 
size="+1">do_stuff($a, $b, $c)</font></code>. In most cases, we'd like to be able 
	to tell how to use a function by just looking at its declaration. </p>
<p><b>Summary:</b> The basic philosophy here is to not hurt code clarity for the 
	sake of laziness. This has to be balanced by a little bit of common sense, 
	though; <code><font size="+1">print_login_status_for_a_given_user()</font></code> 
	goes too far, for example -- that function would be better named <code><font 
size="+1">print_user_login_status()</font></code> , or just <code><font 
size="+1">print_login_status()</font></code>. </p>
<br />
<br />
<a name="layout" id="layout"></a><a 
href="#top">top</a> 
<h3>Code Layout</h3>
<p><b>Standard header for new files:</b> Here a template of the header that must 
	be included at the start of all YF.Engine files: </p>
<pre><font size="+1">
//#### file_name: forum_admin.class.php, ver:1.0.1, last_modified: 12.11.05 ####//

//-----------------------------------------------------------------------------
// Your code here
function some_func () {
}
//-----------------------------------------------------------------------------
</font></pre>
<p></p>
<p><b>Always include the braces:</b> This is another case of being too lazy to 
	type 2 extra characters causing problems with code clarity. Even if the body 
	of some construct is only one line long, do <i>not</i> drop the braces. Just 
	don't. <br />
	<br />
	&nbsp;&nbsp;&nbsp;Examples:</p>
<pre><font size="+1">
		/* These are all wrong. */
		if (condition)	do_stuff();
		if (condition)
			do_stuff();
		while (condition) 
			do_stuff();
		for ($i = 0; $i &lt; size; $i++)
			do_stuff($i);
		
		/* These are right. */
		if (condition) {
			do_stuff();
		}
		while (condition) {
			do_stuff();
		}
		for ($i = 0; $i &lt; size; $i++) {
			do_stuff();
		}
	</font></pre>
<p></p>
<p><b>Where to put the braces:</b> We are using PEAR Style to format braces. This 
	means that opening brace should be on the same line as the corresponding operator 
	and need to be separated from it by one space. The closing brace should also 
	always be at the same column as the corresponding opening brace. <br />
	<br />
	&nbsp;&nbsp;&nbsp;Examples:</p>
<pre><font size="+1">
		if (condition) {
			while (condition2) {
				...
			}
		} else {
			...
		}

		for ($i = 0; $i &lt; $size; $i++) {
			...
		}
		
		while (condition) {
			...
		}
		
		function do_stuff() {
			...
		}
	</font></pre>
<p></p>
<p><b>Use spaces between tokens:</b> This is another simple, easy step that helps 
	keep code readable without much effort. Whenever you write an assignment, 
	expression, etc.. Always leave <i>one</i> space between the tokens. Basically, 
	write code as if it was English. Put spaces between variable names and operators. 
	Don't put spaces just after an opening bracket or before a closing bracket. 
	Don't put spaces just before a comma or a semicolon. This is best shown with 
	a few examples. <br />
	<br />
	&nbsp;&nbsp;&nbsp;Examples:</p>
<pre><font size="+1">
		/* Each pair shows the wrong way followed by the right way. */
		
		$i=0;
		$i = 0;
		
		if($i&lt;7) ...
		if ($i &lt; 7) ...
		
		if ( ($i &lt; 7)&amp;&amp;($j &gt; 8) ) ...
		if (($i &lt; 7) &amp;&amp; ($j &gt; 8)) ...
		
		do_stuff( $i, "foo", $b );
		do_stuff($i, "foo", $b);
		
		for($i=0; $i&lt;$size; $i++) ...
		for($i = 0; $i &lt; $size; $i++) ... 
		
		$i=($j &lt; $size)?0:1;
		$i = ($j &lt; $size) ? 0 : 1;
	</font></pre>
<p></p>
<p><b>Operator precedence:</b> Do you know the exact precedence of all the operators 
	in PHP? Neither do I. Don't guess. Always make it obvious by using brackets 
	to force the precedence of an equation so you know what it does. <br />
	<br />
	&nbsp;&nbsp;&nbsp;Examples:</p>
<pre><font size="+1">
		/* what's the result? who knows. */
		$bool = ($i &lt; 7 &amp;&amp; $j &gt; 8 || $k == 4);
		
		/* now you can be certain what I'm doing here. */
		$bool = (($i &lt; 7) &amp;&amp; (($j &lt; 8) || ($k == 4)))
		</font></pre>
<p></p>
<p><b>SQL code layout:</b> Since we'll all be using different editor settings, 
	don't try to do anything complex like aligning columns in SQL code. Do, however, 
	break statements onto their own lines. Here's a sample of how SQL code should 
	look. Note where the lines break, the capitalization, and the use of brackets. 
	<br />
	<br />
	&nbsp;&nbsp;&nbsp;Examples:</p>
<pre><font size="+1">
		SELECT field1 AS something, field2, field3
		FROM table a, table b
		WHERE (this = that) AND (this2 = that2)
		</font></pre>
<p></p>
<p><b>SQL insert statements:</b> SQL INSERT statements can be written in two different 
	ways. Either you specify explicitly the columns being inserted, or you rely 
	on knowing the order of the columns in the database and do not specify them. 
	We want to use the former approach, where it is explicitly stated whcih columns 
	are being inserted. This means our application-level code will not depend 
	on the order of the fields in the database, and will not be broken if we add 
	additional fields (unless they're specified as NOT NULL, of course). <br />
	<br />
	&nbsp;&nbsp;&nbsp;Examples:</p>
<pre><font size="+1">
		# This is not what we want.
		INSERT INTO mytable
		VALUES ('something', 1, 'else')
		
		# This is correct.
		INSERT INTO mytable (column1, column2, column3)
		VALUES ('something', 1, 'else')
		</font></pre>
<p></p>
<br />
<br />
<a name="general" id="general"></a><a 
href="#top">top</a> 
<h3>General Guidelines</h3>
<p><b>Quoting strings:</b> There are two different ways to quote strings in PHP 
	- either with single quotes or with double quotes. The main difference is 
	that the parser does variable interpolation in double-quoted strings, but 
	not in single quoted strings. Because of this, you should <i>always</i> use 
	single quotes <i>unless</i> you specifically need variable interpolation to 
	be done on that string. This way, we can save the parser the trouble of parsing 
	a bunch of strings where no interpolation needs to be done. Also, if you are 
	using a string variable as part of a function call, you do not need to enclose 
	that variable in quotes. Again, this will just make unnecessary work for the 
	parser. Note, however, that nearly all of the escape sequences that exist 
	for double-quoted strings will not work with single-quoted strings. Be careful, 
	and feel free to break this guideline if it's making your code harder to read. 
	<br />
	<br />
	&nbsp;&nbsp;&nbsp;Examples:</p>
<pre><font size="+1">
		/* wrong */
		$str = "This is a really long string with no variables for the parser to find.";
		do_stuff("$str");
		
		/* right */
		$str = 'This is a really long string with no variables for the parser to find.';
		do_stuff($str);
		</font></pre>
<p></p>
<p><b>Associative array keys:</b> In PHP, it's legal to use a literal string as 
	a key to an associative array without quoting that string. We don't want to 
	do this -- the string should always be quoted to avoid confusion. Note that 
	this is only when we're using a literal, not when we're using a variable. 
	<br />
	<br />
	&nbsp;&nbsp;&nbsp;Examples:</p>
<pre><font size="+1">
		/* wrong */
		$foo = $assoc_array[blah];
		
		/* right */
		$foo = $assoc_array['blah'];
		</font></pre>
<p></p>
<p><b>Comments:</b> Each function should be preceded by a comment that tells a 
	programmer everything they need to know to use that function. The meaning 
	of every parameter, the expected input, and the output are required as a minimal 
	comment. The function's behaviour in error conditions (and what those error 
	conditions are) should also be present. Nobody should have to look at the 
	actual source of a function in order to be able to call it with confidence 
	in their own code. <br />
	<br />
	In addition, commenting any tricky, obscure, or otherwise not-immediately-obvious 
	code is clearly something we should be doing. Especially important to document 
	are any assumptions your code makes, or preconditions for its proper operation. 
	Any one of the developers should be able to look at any part of the application 
	and figure out what's going on in a reasonable amount of time. </p>
<p><b>Shortcut operators:</b> The only shortcut operators that cause readability 
	problems are the shortcut increment ($i++) and decrement ($j--) operators. 
	These operators should not be used as part of an expression. They can, however, 
	be used on their own line. Using them in expressions is just not worth the 
	headaches when debugging. <br />
	<br />
	&nbsp;&nbsp;&nbsp;Examples:</p>
<pre><font size="+1">
		/* wrong */
		$array[++$i] = $j;
		$array[$i++] = $k;
		
		
		/* right */
		$i++;
		$array[$i] = $j;
		
		$array[$i] = $k;
		$i++;
		</font></pre>
<p></p>
<p><b>Inline conditionals:</b> Inline conditionals should only be used to do very 
	simple things. Preferably, they will only be used to do assignments, and not 
	for function calls or anything complex at all. They can be harmful to readability 
	if used incorrectly, so don't fall in love with saving typing by using them. 
	<br />
	<br />
	&nbsp;&nbsp;&nbsp;Examples:</p>
<pre><font size="+1">
		/* Bad place to use them */
		(($i &lt; $size) &amp;&amp; ($j &gt; $size)) ? do_stuff($foo) : do_stuff($bar);
		
		
		/* OK place to use them */
		$min = ($i &lt; $j) ? $i : $j;
		</font></pre>
<p></p>
<p><b>Don't use uninitialized variables.</b> for YF.Engine, we intend to use 
	a higher level of run-time error reporting. This will mean that the use of 
	an uninitialized variable will be reported as an error. This will come up 
	most often when checking which HTML form variables were passed. These errors 
	can be avoided by using the built-in isset() function to check whether a variable 
	has been set. <br />
	<br />
	&nbsp;&nbsp;&nbsp;Examples:</p>
<pre><font size="+1">
		/* Old way */
		if ($forum) ...
		
		
		/* New way */
		if (isset($forum)) ...
		</font></pre>
<p></p>
<br />
<br />
<a href="#top">Return to top</a> </font> 
</body>
</html>
